#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int pipefd[2];        // Array to hold file descriptors for the pipe (pipefd[0] for reading, pipefd[1] for writing)
    pid_t pid;
    char buffer[100];   

    // Create the pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe failed");
        exit(EXIT_FAILURE);
    }

    // Fork a new process
    pid = fork();

    if (pid < 0) {
        printf("Fork failed");
        return 0;
    }

    if (pid > 0) {
        // Parent process
        close(pipefd[1]);  // Close the write end of the pipe, parent will only read

        // Read the message from the pipe
        read(pipefd[0], buffer, sizeof(buffer));
        printf("Parent: Received message from child: %s\n", buffer);

        // Close the read end of the pipe
        close(pipefd[0]);

    } else {
        // Child process
        close(pipefd[0]);  // Close the read end of the pipe, child will only write

        // Message to send to the parent
        char message[] = "Hello from child process!";
        printf("Child: Writing message to parent...\n");

        // Write the message to the pipe
        write(pipefd[1], message, strlen(message) + 1);  // +1 to include null terminator

        // Close the write end of the pipe
        close(pipefd[1]);
        
        // Exit the child process
        exit(0);
    }

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

struct Process {
    int pid;
    int at;  // Arrival Time
    int bt;  // Burst Time
    int remaining_time;  // Remaining Time
    int completion_time;  // Completion Time
    int turnaround_time;  // Turnaround Time
    int waiting_time;  // Waiting Time
};

int main() {
    // Initialize random number generator
    srand(time(0));

    // Initialize variables
    int n, i, time = 0, quantum_count = 0;
    struct Process processes[MAX_PROCESSES];
    float avg_turnaround_time = 0, avg_waiting_time = 0;

    // Prompt user for number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Read AT and BT values for each process
    for (i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        scanf("%d %d", &processes[i].at, &processes[i].bt);
        processes[i].remaining_time = processes[i].bt;
    }

    // Perform Round Robin scheduling
    while (1) {
        int flag = 1;

        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].at <= time) {
                flag = 0;

                printf("Scheduling Process P%d at time %d\n", processes[i].pid, time);  // Debug

                if (processes[i].remaining_time <= TIME_QUANTUM) {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                } else {
                    time += TIME_QUANTUM;
                    processes[i].remaining_time -= TIME_QUANTUM;
                }

                if (processes[i].remaining_time == 0) {
                    processes[i].completion_time = time;
                    processes[i].turnaround_time = processes[i].completion_time - processes[i].at;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].bt;

                    avg_turnaround_time += processes[i].turnaround_time;
                    avg_waiting_time += processes[i].waiting_time;
                }
            }
        }

        if (flag == 1) {
            break;
        }
    }

    // Calculate average turnaround time and average waiting time
    avg_turnaround_time /= n;
    avg_waiting_time /= n;

    // Print table chart
    printf("\n|%-7s|%-7s|%-7s|%-7s|%-7s|%-7s|%-7s|\n", "Process", "AT", "BT", "CT", "TAT", "WT", "RT");
    for (i = 0; i < n; i++) {
        printf("|%-7d|%-7d|%-7d|%-7d|%-7d|%-7d|%-7d|\n", processes[i].pid, processes[i].at, processes[i].bt, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time, processes[i].remaining_time);
    }

    // Print average turnaround time and average waiting time with rounding
    printf("\nAverage Turnaround Time: %.1f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.1f\n", avg_waiting_time);

    return 0;
}
